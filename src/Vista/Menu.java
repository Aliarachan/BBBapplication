/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.CtrlApplication;
import Exceptions.ClientException;
import Model.Apartment;
import Model.Appointment;
import Model.Client;
import Model.NewApartment;
import Model.OffProtApartment;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Cantor
 */
public class Menu extends javax.swing.JFrame {
    private CtrlApplication controller;
    private boolean saved;
    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
        controller = new CtrlApplication();
        loadChanges();
        setComponents();
        saved = false;
        this.setTitle("BBB APPLICATION");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddClient = new javax.swing.JButton();
        btnRemoveClient = new javax.swing.JButton();
        btnChangeClient = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstClients = new javax.swing.JList();
        btnAddApartment = new javax.swing.JButton();
        btnRemoveApartment = new javax.swing.JButton();
        btnChangeApartment = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstCatalog = new javax.swing.JList();
        btnAddAppointment = new javax.swing.JButton();
        btnRemoveAppointment = new javax.swing.JButton();
        btnChangeAppointment = new javax.swing.JButton();
        btnSaveChanges = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstSchedule = new javax.swing.JList();
        btnMostVisitedApartments = new javax.swing.JButton();
        btnMostVisitorClients = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btnAddClient.setText("Add Client");
        btnAddClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddClientActionPerformed(evt);
            }
        });

        btnRemoveClient.setText("Remove Client");
        btnRemoveClient.setMaximumSize(new java.awt.Dimension(81, 23));
        btnRemoveClient.setMinimumSize(new java.awt.Dimension(81, 23));
        btnRemoveClient.setPreferredSize(new java.awt.Dimension(81, 23));
        btnRemoveClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveClientActionPerformed(evt);
            }
        });

        btnChangeClient.setText("Change Client");
        btnChangeClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeClientActionPerformed(evt);
            }
        });

        lstClients.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstClientsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstClients);

        btnAddApartment.setText("Add Apartment");
        btnAddApartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddApartmentActionPerformed(evt);
            }
        });

        btnRemoveApartment.setText("Remove Apartment");
        btnRemoveApartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveApartmentActionPerformed(evt);
            }
        });

        btnChangeApartment.setText("Change Apartment");

        lstCatalog.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstCatalogValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstCatalog);

        btnAddAppointment.setText("Add Appointment");
        btnAddAppointment.setPreferredSize(new java.awt.Dimension(81, 23));
        btnAddAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAppointmentActionPerformed(evt);
            }
        });

        btnRemoveAppointment.setText("Remove Appointment");
        btnRemoveAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveAppointmentActionPerformed(evt);
            }
        });

        btnChangeAppointment.setText("Change Appointment");

        btnSaveChanges.setText("Save changes");
        btnSaveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveChangesActionPerformed(evt);
            }
        });

        lstSchedule.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstScheduleValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(lstSchedule);

        btnMostVisitedApartments.setText("Show most visited apartments");
        btnMostVisitedApartments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostVisitedApartmentsActionPerformed(evt);
            }
        });

        btnMostVisitorClients.setText("Show most visitor clients");
        btnMostVisitorClients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostVisitorClientsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnChangeAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemoveAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemoveClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnChangeClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane4))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAddApartment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRemoveApartment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnChangeApartment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(57, 57, 57)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(27, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnMostVisitorClients, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSaveChanges, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMostVisitedApartments, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                        .addGap(84, 84, 84))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddApartment, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnRemoveApartment, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(btnChangeApartment, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddClient, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(btnRemoveClient, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(btnChangeClient, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAddAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(btnRemoveAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(btnChangeAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(btnMostVisitedApartments, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(btnMostVisitorClients, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSaveChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This function allows to open a new jDialog to perform the necessary options to add a client.
     * @param evt 
     */
    private void btnAddClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddClientActionPerformed
        FrmAddClient dialog = new FrmAddClient(this, true);
        dialog.setTitle("Client Data");
        dialog.pack();
        dialog.setVisible(true);
        Client client = dialog.getClient();
        if (client != null){
            try {
                controller.addClient(client);
                updateClientList();
            } catch (ClientException ex) {
                JOptionPane.showMessageDialog(this, "This Client is repeated", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAddClientActionPerformed

    /**
     * This method allows to remove a selected client.
     * @param evt 
     */
    private void btnRemoveClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveClientActionPerformed
        for(Object item: lstClients.getSelectedValuesList()){ 
             Client selected = (Client) item;
             controller.removeClient(selected);
             updateClientList();

        }
    }//GEN-LAST:event_btnRemoveClientActionPerformed

    /**
     * This function opens a new jDialog to perform the needed actions to add a new apartment.
     * @param evt 
     */
    private void btnAddApartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddApartmentActionPerformed
        //First of all, I guide the user by showing two options: creating a new apartment or a offprotection apartment.
        String [] options = {"Offprotection apartment", "New apartment"};
            int result = JOptionPane.showOptionDialog(this, "Which kind of apartment do you want to add?",
                    "Choose one", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                    options, options[0]);
            
            //If the user choses the second option, which is the NEW APARTMENT option, we proceed one way:
            //We open a frame which all information needed for the newApartment can be fulfilled.
            if (result == JOptionPane.NO_OPTION){
                FrmAddApartment dialog = new FrmAddApartment(this, true);
                dialog.setTitle("New apartment Data");
                dialog.pack();
                dialog.setVisible(true);
                NewApartment apartment = dialog.getNewApartment();
                
                //Reached this point, the user has entered and gotten out of the New Apartment frame.
                //If the option has been cancelled, then we may have a null new apartment.
                //Otherwise, we are willing to put this new apartment in the apartment's Catalog.
                if(apartment != null){
                    controller.addApartment(apartment);
                    updateCatalog();
                    Client auxClient = apartment.getClient();
                    
                    //Since a newApartment has an Owner, we understand that the OWNER can be a CLIENT.
                    //If the user has given one DNI that is not in our ClientList, then we offer the utility to automatically add the client.
                    //We ask if the user wants it so with another option pane.
                    if (!controller.getClientList().checkClientOnClientList(auxClient)){
                        String [] optionClient = {"Yes", "No"};
                        int resultClient = JOptionPane.showOptionDialog(this, "You've created apartment whose owner is not on your client list. Do you wish to add the owner?",
                        "Warning!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                        optionClient, optionClient[0]);
                        
                        //If the user says yes, we just add the Client.
                        if (resultClient == JOptionPane.YES_OPTION){
                            try {
                                controller.addClient(auxClient);
                                updateClientList();
                            } catch (ClientException ex) {
                                //We don't need an exception here.
                                 //If the user inputs an apartment whose owner is not in the list, it gets added.
                                //So it's no use to have the exception here, it should never happen to get here.
                                System.out.println("We should never get here");
                             }
                        }
                    }
                }
                         
            //OTHERWISE, if the user asks to create an OFFPROTECTION apartment, we proceed here.
            //We open another Dialog where we provide all camps that must be fulfilled to creat such an apartment.
            } else if(result == JOptionPane.YES_OPTION){
                FrmAddOffProt dialog2 = new FrmAddOffProt(this, true);
                dialog2.setTitle("Offprotection Apartment Data");
                dialog2.pack();
                dialog2.setVisible(true);
                
                OffProtApartment offApartment = dialog2.getOffProtApartment();
                if (offApartment != null){
                    controller.addApartment(offApartment);
                    updateCatalog();
                }
            }
    
    }//GEN-LAST:event_btnAddApartmentActionPerformed

    /**
     * This function opens a new jDialog to perform the needed actions to add a new appointment.
     * @param evt 
     */
    private void btnAddAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAppointmentActionPerformed
        FrmAddAppointment dialog = new FrmAddAppointment(this, true);
        dialog.setTitle("Appointment Data");
        dialog.pack();
        dialog.setVisible(true);
        Appointment appointment = dialog.getAppointment();
        if (appointment != null){
            controller.addAppointment(appointment);
            updateSchedule();
        }
    }//GEN-LAST:event_btnAddAppointmentActionPerformed

    /**
     * This methods allows to enable the removeClient, changeClient buttons if some client is previously selected. 
     * @param evt 
     */
    private void lstClientsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstClientsValueChanged
        btnRemoveClient.setEnabled(!lstClients.isSelectionEmpty());
        btnChangeClient.setEnabled(!lstClients.isSelectionEmpty());
    }//GEN-LAST:event_lstClientsValueChanged

    /**
     * This method allows to enable the removeApartment, changeApartment buttons if some apartment is previously selected. 
     * @param evt 
     */
    private void lstCatalogValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstCatalogValueChanged
        btnRemoveApartment.setEnabled(!lstCatalog.isSelectionEmpty());
        btnChangeApartment.setEnabled(!lstCatalog.isSelectionEmpty());
    }//GEN-LAST:event_lstCatalogValueChanged

    /**
     * This method allows to remove the selected apartments from the catalog.
     * @param evt 
     */
    private void btnRemoveApartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveApartmentActionPerformed
        for(Object item: lstCatalog.getSelectedValuesList()){ 
             Apartment selected = (Apartment) item;
             controller.removeApartment(selected);
             updateCatalog();

        }
    }//GEN-LAST:event_btnRemoveApartmentActionPerformed

    /**
     * This method allows to enable the removeAppointment, ChangeAppointment buttons if some appointmnet is previously selected.
     * @param evt 
     */
    private void lstScheduleValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstScheduleValueChanged
        btnRemoveAppointment.setEnabled(!lstSchedule.isSelectionEmpty());
        btnChangeAppointment.setEnabled(!lstSchedule.isSelectionEmpty());
    }//GEN-LAST:event_lstScheduleValueChanged

    /**
     * This method allows to remove the selected appointments from the schedule.
     * @param evt 
     */
    private void btnRemoveAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveAppointmentActionPerformed
        for(Object item: lstSchedule.getSelectedValuesList()){ 
             Appointment selected = (Appointment) item;
             controller.removeAppointment(selected);
             updateSchedule();

        }
    }//GEN-LAST:event_btnRemoveAppointmentActionPerformed

    /**
     * This method allows to save changes whenever the button is pressed. 
     * @param evt 
     */
    private void btnSaveChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveChangesActionPerformed
        try {
            controller.saveData();
            saved = true;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Some error ocurred. Please, try saving again.", "Warning!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveChangesActionPerformed

    /**
     * Whenever the windows is closed, it checks if the changes have been saved and asks to user wants to save them. 
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        askForSaving();
    }//GEN-LAST:event_formWindowClosing

    private void btnMostVisitedApartmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostVisitedApartmentsActionPerformed
        FrmSeeApartments dialog = new FrmSeeApartments(this, true, controller.getCatalog());
        dialog.setTitle("Apartments sorted by number of visits");
        dialog.pack();
        dialog.setVisible(true);
  
    }//GEN-LAST:event_btnMostVisitedApartmentsActionPerformed

    private void btnChangeClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeClientActionPerformed
        Client c = (Client) lstClients.getSelectedValue();
        FrmAdminClient dialog = new FrmAdminClient(this,true, c);
        dialog.setTitle("Change any data you need");
        dialog.pack();
        dialog.setVisible(true);
        updateClientList();
        
    }//GEN-LAST:event_btnChangeClientActionPerformed

    private void btnMostVisitorClientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostVisitorClientsActionPerformed
        FrmSeeClients dialog = new FrmSeeClients(this, true, controller.getClientList());
        dialog.setTitle("Clients sorted by number of visits");
        dialog.pack();
        dialog.setVisible(true);
    }//GEN-LAST:event_btnMostVisitorClientsActionPerformed

    /**
     * Updates the Client List in the menu.
     */
    private void updateClientList(){
        DefaultListModel model = new DefaultListModel();
        model.clear();
        ArrayList<Client> currentLst = controller.getClientList().getArrayList();
        for (Iterator it = currentLst.iterator(); it.hasNext();) {
            Client item = (Client)it.next();
            model.addElement(item);
        }
        lstClients.setModel(model);
        
    }
    
    /**
     * Updates the apartment Catalogue in the menu.
     */
    private void updateCatalog() {
        DefaultListModel model = new DefaultListModel();
        model.clear();
        ArrayList<Apartment> currentLst = controller.getCatalog().getArrayList();
        for (Iterator it = currentLst.iterator(); it.hasNext();){
            Apartment item = (Apartment)it.next();
            model.addElement(item);
        }
        lstCatalog.setModel(model);
    }
    
    /**
     * Updates the Appointmnet List in the menu.
     */
    private void updateSchedule(){
        DefaultListModel model = new DefaultListModel();
        model.clear();
        ArrayList<Appointment> currentLst = controller.getSchedule().getArrayList();
        for (Iterator it = currentLst.iterator(); it.hasNext();){
            Appointment item = (Appointment)it.next();
            model.addElement(item);
        }
        lstSchedule.setModel(model);
    }
    
    private void setComponents(){
        btnRemoveClient.setEnabled(false);
        btnChangeClient.setEnabled(false);
        btnRemoveApartment.setEnabled(false);
        btnChangeApartment.setEnabled(false);
        btnRemoveAppointment.setEnabled(false);
        btnChangeAppointment.setEnabled(false);
    }
    
    /**
     * Method that automatically load all previous data for the applicartion.
     */
    private void loadChanges(){
        try {
            controller.loadData();
        } catch (IOException | ClassNotFoundException ex ) {
            JOptionPane.showMessageDialog(this, "Your previous information may be corrupted. Restart the application.", "Warning!", JOptionPane.WARNING_MESSAGE);
        }
        updateClientList();
        updateSchedule();
        updateCatalog();
    }
    
    /**
     * Method that, when the windows is closed, asks if the data shall be saved. 
     */
    private void askForSaving(){
        if (!saved){
            String [] options = {"Save", "Close without saving"};
            int result = JOptionPane.showOptionDialog(this, "You've made changes without asking, do you wish to save?",
                    "Warning!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                    options, options[0]);
            if (result == JOptionPane.YES_OPTION){
                try {
                    controller.saveData();
                    saved = true;
                } catch (IOException ex) {
                     JOptionPane.showMessageDialog(this, "Some error ocurred. Try saving again.", "Warning!", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddApartment;
    private javax.swing.JButton btnAddAppointment;
    private javax.swing.JButton btnAddClient;
    private javax.swing.JButton btnChangeApartment;
    private javax.swing.JButton btnChangeAppointment;
    private javax.swing.JButton btnChangeClient;
    private javax.swing.JButton btnMostVisitedApartments;
    private javax.swing.JButton btnMostVisitorClients;
    private javax.swing.JButton btnRemoveApartment;
    private javax.swing.JButton btnRemoveAppointment;
    private javax.swing.JButton btnRemoveClient;
    private javax.swing.JButton btnSaveChanges;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList lstCatalog;
    private javax.swing.JList lstClients;
    private javax.swing.JList lstSchedule;
    // End of variables declaration//GEN-END:variables

}
